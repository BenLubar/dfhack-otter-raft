for server WindowsBuilder
{
    set %FriendlyOSArch = %(osx32: 32-bit Mac OS X, osx64: 64-bit Mac OS X, linux32: 32-bit Linux, linux64: 64-bit Linux, win32: 32-bit Windows, win64: 64-bit Windows);

    Ensure-Directory $WorkingDirectory;

    PSCall dfhack::check-df-version
    (
        workingDirectory: $WorkingDirectory,
        lastETag: $LastDFReleaseETag,
        lastModified: $LastDFReleaseModified,
        etag => $NewETag,
        modified => $NewModified,
        version => $VersionNumber,
        date => $Date,
        versions => @VersionFiles
    );

    foreach $FileName in @VersionFiles
    {
        set $ActualFileName = $FileName;

        if $MatchesRegex($FileName, \.tar\.bz2`$)
        {
            set $LinuxWorkingDirectory = "";

            for server LinuxBuilder
            {
                set $LinuxWorkingDirectory = $WorkingDirectory;
            }

            set $ActualFileName = $Replace($FileName, .tar.bz2, .zip);

            Transfer-Files
            (
                Include: $FileName,
                FromDirectory: $WorkingDirectory,
                FromServer: WindowsBuilder,
                ToDirectory: $LinuxWorkingDirectory,
                ToServer: LinuxBuilder
            );

            for server LinuxBuilder
            {
                SHExec >>mkdir temp
cd temp
tar  xf ../$FileName --strip-components 1 --warning no-timestamp
zip -r ../$ActualFileName .
cd ..
rm -rf temp>>
                (
                    Verbose: true
                );
            }

            Transfer-Files
            (
                Include: $ActualFileName,
                FromDirectory: $LinuxWorkingDirectory,
                FromServer: LinuxBuilder,
                ToDirectory: $WorkingDirectory,
                ToServer: WindowsBuilder
            );
        }

        set $Suffix = $Replace($Replace($ListItem(@Split($ActualFileName, _), 3), .zip, 64), 3264, 32);

        if $Suffix == linux64
        {
            for server LinuxBuilder
            {
                # Raws
                {
                    SHCall dfhack::df-raws-make
                    (
                        Arguments: '"$VersionNumber" "$Date"'
                    );
                }

                # Docker
                {
                    InedoCore::Exec
                    (
                        FileName: /usr/bin/git,
                        Arguments: clone git@github.com:BenLubar/df-docker.git df-docker,
                        ErrorOutputLogLevel: Debug
                    );

                    set $VersionUnderscore2 = $ListItem(@Split($ActualFileName, _), 1)_$ListItem(@Split($ActualFileName, _), 2);

                    set $SHA1Checksum = $SHEval(sha1sum -b "$ActualFileName" | cut -f 1 -d " ");

                    InedoCore::Apply-Template dfhack::docker-dwarffortress
                    (
                        OutputFile: df-docker/dwarffortress/Dockerfile,
                        NewLines: Linux
                    );

                    InedoCore::Exec
                    (
                        FileName: /usr/bin/git,
                        Arguments: add dwarffortress/Dockerfile,
                        ErrorOutputLogLevel: Debug,
                        WorkingDirectory: df-docker
                    );

                    InedoCore::Exec
                    (
                        FileName: /usr/bin/git,
                        Arguments: commit -m "Dwarf Fortress $Version",
                        ErrorOutputLogLevel: Debug,
                        WorkingDirectory: df-docker
                    );

                    InedoCore::Exec
                    (
                        FileName: /usr/bin/git,
                        Arguments: tag "$Version",
                        ErrorOutputLogLevel: Debug,
                        WorkingDirectory: df-docker
                    );

                    InedoCore::Exec
                    (
                        FileName: /usr/bin/git,
                        Arguments: push,
                        ErrorOutputLogLevel: Debug,
                        WorkingDirectory: df-docker
                    );

                    InedoCore::Exec
                    (
                        FileName: /usr/bin/git,
                        Arguments: push --tags,
                        ErrorOutputLogLevel: Debug,
                        WorkingDirectory: df-docker
                    );
                }
            }
        }

        if false
        {
            # Bug?
            set $ApplicationName = "";

            # Bug?
            set $ReleaseNumber = "";

            ProGet::Push-Package
            (
                Credentials: ProGet,
                Feed: DwarfFortress,
                FilePath: $ActualFileName,
                Group: dwarffortress/core,
                Name: $Suffix,
                Version: $VersionNumber,
                Description: "Dwarf Fortress [version $VersionNumber](https://dwarffortresswiki.org/index.php/Release_information/$VersionNumber) for $MapItem(%FriendlyOSArch, $Suffix), released on $Date.",
                Title: "Dwarf Fortress ($MapItem(%FriendlyOSArch, $Suffix))",
                Icon: https://proget.local.lubar.me/endpoints/public-assets/content/dwarffortress-icons/dwarffortress/core.png
            );
        }
    }

    Otter::Set-Variable
    (
        Credentials: Otter-Variables,
        Name: LastDFReleaseETag,
        Value: $NewETag
    );

    Otter::Set-Variable
    (
        Credentials: Otter-Variables,
        Name: LastDFReleaseModified,
        Value: $NewModified
    );
}

module DFHack-PR-Git<$RepoID, $Repository, $Directory, $BaseBranch, $PullRequest, $RequestedCommitHash>
{
    set $CacheDir = $PathCombine($DFHackGitCache, $RepoID);

    if $DirectoryExists($CacheDir)
    {
        # We already have a cached version of the repository. Update all remotes.
        InedoCore::Exec
        (
            FileName: $DefaultGitExePath,
            Arguments: remote update,
            WorkingDirectory: $CacheDir,
            ErrorOutputLogLevel: Information
        );
    }
    else
    {
        # Make a local mirror of the repository so we don't need to re-download it every time.
        InedoCore::Exec
        (
            FileName: $DefaultGitExePath,
            Arguments: clone -q --mirror $Repository .,
            WorkingDirectory: $CacheDir,
            ErrorOutputLogLevel: Warning
        );
    }

    # Clone the repository using our local mirror as a base. Ignore "detached head" warnings that will occur when cloning a tag.
    InedoCore::Exec
    (
        FileName: $DefaultGitExePath,
        Arguments: -c advice.detachedHead=false clone -q -b $BaseBranch --reference $CacheDir $Repository .,
        WorkingDirectory: $Directory,
        ErrorOutputLogLevel: Warning
    );

    # Make sure all tags are available.
    InedoCore::Exec
    (
        FileName: $DefaultGitExePath,
        Arguments: fetch -q --tags,
        WorkingDirectory: $Directory,
        ErrorOutputLogLevel: Warning
    );

    # Download the pull request's code.
    InedoCore::Exec
    (
        FileName: $DefaultGitExePath,
        Arguments: fetch $Repository refs/pull/$PullRequest/merge,
        WorkingDirectory: $Directory,
        ErrorOutputLogLevel: Information
    );

    # Check out the specific commit requested.
    InedoCore::Exec
    (
        FileName: $DefaultGitExePath,
        Arguments: -c advice.detachedHead=false checkout -q $Coalesce($RequestedCommitHash, FETCH_HEAD),
        WorkingDirectory: $Directory,
        ErrorOutputLogLevel: Warning
    );

    # Clone submodules. Any we've previously downloaded are cached in the local mirror.
    InedoCore::Exec
    (
        FileName: $DefaultGitExePath,
        Arguments: submodule update -q --init --recursive --reference $CacheDir,
        WorkingDirectory: $Directory,
        ErrorOutputLogLevel: Debug
    );

    # Last step: fix up file modification timestamps.
    InedoCore::Exec
    (
        FileName: /usr/bin/docker,
        Arguments: run --rm -v $BaseWorkingDirectory:$BaseWorkingDirectory -w $Directory $DFHackBuildEnv git last-modified,
        WorkingDirectory: $Directory,
        ErrorOutputLogLevel: Debug
    );
}

if $ListIndexOf(@ArtifactsInBuild, test-scripts) == -1
{
    Log-Debug Skipping tests - no test scripts.;
}
else
{
    set $GitHubOrg = $Coalesce($GetVariableValue(PluginOwner), DFHack);

    set $GitHubRepo = $Coalesce($GetVariableValue(PluginRepo), $GetVariableValue(PullRepo), $ApplicationName);

    set $CommitHash = $Coalesce($GetVariableValue(PluginCommit), $GetVariableValue(OverrideStructuresCommit), $GetVariableValue(DFHackCommit));

    Log-Debug Detected repository: $GitHubOrg/$GitHubRepo;

    Log-Debug Detected commit: $CommitHash;

    GitHub-Set-Status
    (
        Credentials: GitHub-DFHack,
        Organization: $GitHubOrg,
        Repository: $GitHubRepo,
        AdditionalContext: tests,
        CommitHash: $CommitHash,
        Status: pending
    );

    Acquire-Server
    (
        Role: DFHack-Linux-Testers,
        Verbose: true,
        ServerName => $TestServer
    );

    for server $TestServer
    {
        InedoCore::Exec
        (
            FileName: /usr/bin/docker,
            Arguments: pull $DFHackBuildEnv:latest,
            ErrorOutputLogLevel: Debug
        );

        call dfhack-raft::DFHack-Cache-DF
        (
            TargetPath: $WorkingDirectory/DF,
            OperatingSystem: Linux,
            Bits: 64
        );

        if $GetVariableValue(PluginCommit) != ""
        {
            if $GetVariableValue(DFHackTag) == ""
            {
                call dfhack-raft::DFHack-Universal-Package
                (
                    GroupName: dfhack/core,
                    PackageName: linux64-dev,
                    OutputPath: $WorkingDirectory/DF,
                    FeedName: DwarfFortress-prerelease
                );
            }
            else
            {
                call dfhack-raft::DFHack-Universal-Package
                (
                    GroupName: dfhack/core,
                    PackageName: linux64,
                    NormalizedVersion: $Replace($DFHackTag, .0, .),
                    OutputPath: $WorkingDirectory/DF,
                    FeedName: DwarfFortress
                );
            }

            Deploy-Artifact Linux64
            (
                To: $WorkingDirectory/DF/hack/plugins_temp,
                TransferAll: true,
                DoNotClearTarget: true,
                Verbose: true,
                OverwriteReadOnly: true
            );

            InedoCore::Exec
            (
                FileName: /bin/tar,
                Arguments: "xf ../plugins_temp/*",
                WorkingDirectory: $WorkingDirectory/DF/hack/plugins
            );

            if $ListIndexOf(@ArtifactsInBuild, $PluginRepo-assets) != -1
            {
                Deploy-Artifact $PluginRepo-assets
                (
                    To: $WorkingDirectory/DF,
                    TransferAll: true,
                    DoNotClearTarget: true,
                    Verbose: true,
                    OverwriteReadOnly: true
                );
            }
        }
        else
        {
            Deploy-Artifact Linux64
            (
                To: $WorkingDirectory/DF/hack_temp,
                TransferAll: true,
                DoNotClearTarget: true,
                Verbose: true,
                OverwriteReadOnly: true
            );

            InedoCore::Exec
            (
                FileName: /bin/tar,
                Arguments: "xf hack_temp/*",
                WorkingDirectory: $WorkingDirectory/DF
            );
        }

        InedoCore::Exec
        (
            FileName: /bin/chmod,
            Arguments: +x dfhack libs/Dwarf_Fortress,
            WorkingDirectory: $WorkingDirectory/DF
        );

        Deploy-Artifact test-scripts
        (
            To: $WorkingDirectory/DF/hack/scripts/test,
            TransferAll: true,
            DoNotClearTarget: true,
            Verbose: true,
            OverwriteReadOnly: true
        );

        for directory $WorkingDirectory/DF
        {
            try
            {
                DFHack::Test
                (
                    OperatingSystem: Linux,
                    Architecture: x86_64,
                    Image: latest,
                    Trusted: $TrustedBuild
                );
            }
            catch
            {
                error;
            }
        }
    }

    GitHub-Set-Status
    (
        Credentials: GitHub-DFHack,
        Organization: $GitHubOrg,
        Repository: $GitHubRepo,
        AdditionalContext: tests,
        CommitHash: $CommitHash,
        Status: auto,
        NormalDescription: "All tests passed (#$ExecutionId)",
        WarningDescription: "Tests passed with warnings (#$ExecutionId)",
        ErrorDescription: "Tests failed! (#$ExecutionId)"
    );
}

##AH:EvaluateStatementDescriptions


set $GitHubBuildContext = pr-$ReleaseNumber;

set $GitHubBuildRepo = dfhack;

set $GitHubBuildCommit = "";

if $IsVariableDefined(OverrideStructuresCommit)
{
    set $GitHubBuildRepo = df-structures;

    set $GitHubBuildCommit = $OverrideStructuresCommit;
}
else
{
    set $GitHubBuildCommit = $DFHackCommit;
}

Set-Execution-Priority 40;

try
{
    GitHub-Set-Status
    (
        Credentials: GitHub-DFHack,
        Organization: DFHack,
        Repository: $GitHubBuildRepo,
        AdditionalContext: $GitHubBuildContext,
        CommitHash: $GitHubBuildCommit,
        Description: "#$ExecutionId downloading source code...",
        Status: pending
    );

    # Get Source
    {
        # Git
        with lock = !DFHackGit
        {
            foreach server in @ServersInRole(DFHack-Linux-Builders)
            {
                # Linux ($ServerName)
                with async = Git
                {
                    call global::DFHack-PR-Get-Sources();
                }
            }

            await Git;
        }

        for server $ListItem(@ServersInRole(DFHack-Linux-Builders), 0)
        {
            Create-Artifact test-scripts
            (
                From: $WorkingDirectory/src/test,
                Verbose: true,
                Overwrite: true
            );
        }

        GitHub-Set-Status
        (
            Credentials: GitHub-DFHack,
            Organization: DFHack,
            Repository: $GitHubBuildRepo,
            AdditionalContext: $GitHubBuildContext,
            CommitHash: $GitHubBuildCommit,
            Description: "#$ExecutionId downloading dependencies...",
            Status: pending
        );

        with lock = !DFHackDependencies
        {
            # Linux
            foreach server in @ServersInRole(DFHack-Linux-Builders)
            {
                # Linux Dependencies ($ServerName)
                {
                    with async = Dependencies
                    {
                        call global::DFHack-Cache-Dependencies
                        (
                            DependencyPath: $WorkingDirectory/src/CMake/downloads
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /usr/bin/docker,
                            Arguments: pull $DFHackBuildEnv:latest,
                            ErrorOutputLogLevel: Debug
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /usr/bin/docker,
                            Arguments: pull $DFHackBuildEnv:gcc-4.8,
                            ErrorOutputLogLevel: Debug
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /usr/bin/docker,
                            Arguments: pull $DFHackBuildEnv:msvc,
                            ErrorOutputLogLevel: Debug
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /bin/bash,
                            Arguments: "-c 'mkdir -p `$HOME/.ccache .ccache {out,build}{32,64}{{,-osx}{,-4.8},-win}'"
                        );
                    }
                }
            }

            await Dependencies;
        }
    }

    GitHub-Set-Status
    (
        Credentials: GitHub-DFHack,
        Organization: DFHack,
        Repository: $GitHubBuildRepo,
        AdditionalContext: $GitHubBuildContext,
        CommitHash: $GitHubBuildCommit,
        Description: "#$ExecutionId waiting to build...",
        Status: pending
    );

    GitHub-Set-Status
    (
        Credentials: GitHub-DFHack,
        Organization: DFHack,
        Repository: $GitHubBuildRepo,
        AdditionalContext: $GitHubBuildContext,
        CommitHash: $GitHubBuildCommit,
        Description: "#$ExecutionId building...",
        Status: pending
    );

    call global::DFHack-Build-Core
    (
        BuildType: RelWithDebInfo
    );
}
catch
{
    error;
}

GitHub-Set-Status
(
    Credentials: GitHub-DFHack,
    Organization: DFHack,
    Repository: $GitHubBuildRepo,
    AdditionalContext: $GitHubBuildContext,
    CommitHash: $GitHubBuildCommit,
    Status: auto
);

##AH:EvaluateStatementDescriptions


with lock = !DFHackTriggerPlugins
{
    if $ReleaseNumber != ""
    {
        set $DFHackVersion = $ReleaseNumber;

        if $DFHackTag != ""
        {
            set $DFHackVersion = dfhack-$ReleaseNumber;
        }

        foreach $PluginName in @ApplicationsInGroup(DFHack Plugins)
        {
            try
            {
                Create-Release
                (
                    Application: $PluginName,
                    ReleaseNumber: $DFHackVersion,
                    Pipeline: DFHack-Plugin,
                    ReleaseName: DFHack $ReleaseName,
                    Variables: %(DFHackBranch: $DFHackBranch, DFHackTag: $DFHackTag, PluginTagged: false)
                );
            }
            catch
            {
            }
        }
    }
}

set $GitHubBuildContext = develop;

set $GitHubBuildCommit = $DFHackCommit;

set $GitHubBuildRepository = dfhack;

if $IsVariableDefined(OverrideStructuresCommit)
{
    Set-Execution-Priority 60;

    set $GitHubBuildContext = auto-structures;

    set $GitHubBuildCommit = $OverrideStructuresCommit;

    set $GitHubBuildRepository = df-structures;
}
else
{
    if $DFHackTag != ""
    {
        set $GitHubBuildContext = release;

        Set-Execution-Priority 70;
    }
    else
    {
        Set-Execution-Priority 30;
    }
}

try
{
    GitHub-Set-Status
    (
        Credentials: GitHub-DFHack,
        Organization: DFHack,
        Repository: $GitHubBuildRepository,
        AdditionalContext: $GitHubBuildContext,
        CommitHash: $GitHubBuildCommit,
        Description: "#$ExecutionId downloading source code...",
        Status: pending
    );

    # Get Source
    {
        # Git
        with lock = !DFHackGit
        {
            foreach server in @ServersInRole(DFHack-Linux-Builders)
            {
                # Linux ($ServerName)
                with async = Git
                {
                    call dfhack-raft::DFHack-Get-Sources();
                }
            }

            await Git;
        }

        for server $ListItem(@ServersInRole(DFHack-Linux-Builders), 0)
        {
            Create-Artifact test-scripts
            (
                From: $WorkingDirectory/src/test,
                Verbose: true,
                Overwrite: true
            );
        }

        GitHub-Set-Status
        (
            Credentials: GitHub-DFHack,
            Organization: DFHack,
            Repository: $GitHubBuildRepository,
            AdditionalContext: $GitHubBuildContext,
            CommitHash: $GitHubBuildCommit,
            Description: "#$ExecutionId downloading dependencies...",
            Status: pending
        );

        with lock = !DFHackDependencies
        {
            # Linux
            foreach server in @ServersInRole(DFHack-Linux-Builders)
            {
                # Linux Dependencies ($ServerName)
                {
                    with async = Dependencies
                    {
                        call dfhack-raft::DFHack-Cache-Dependencies
                        (
                            DependencyPath: $WorkingDirectory/src/CMake/downloads
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /usr/bin/docker,
                            Arguments: pull $DFHackBuildEnv:latest,
                            ErrorOutputLogLevel: Debug
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /usr/bin/docker,
                            Arguments: pull $DFHackBuildEnv:gcc-4.8,
                            ErrorOutputLogLevel: Debug
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /usr/bin/docker,
                            Arguments: pull $DFHackBuildEnv:msvc,
                            ErrorOutputLogLevel: Debug
                        );
                    }

                    with async = Dependencies
                    {
                        InedoCore::Exec
                        (
                            FileName: /bin/bash,
                            Arguments: "-c 'mkdir -p `$HOME/.ccache {out,build}{32,64}{{,-osx}{,-4.8},-win}{,-dbg}'",
                            WorkingDirectory: $WorkingDirectory
                        );
                    }
                }
            }

            await Dependencies;
        }
    }

    GitHub-Set-Status
    (
        Credentials: GitHub-DFHack,
        Organization: DFHack,
        Repository: $GitHubBuildRepository,
        AdditionalContext: $GitHubBuildContext,
        CommitHash: $GitHubBuildCommit,
        Description: "#$ExecutionId waiting to build...",
        Status: pending
    );

    if $DFHackTagged
    {
        if !$GetVariableValue(DFHackReleaseDeployed, scalar)
        {
            with lock = !DFHackCoreBuildRelease
            {
                # Build (Release)
                {
                    GitHub-Set-Status
                    (
                        Credentials: GitHub-DFHack,
                        Organization: DFHack,
                        Repository: $GitHubBuildRepository,
                        AdditionalContext: $GitHubBuildContext,
                        CommitHash: $GitHubBuildCommit,
                        Description: "#$ExecutionId building...",
                        Status: pending
                    );

                    call dfhack-raft::DFHack-Build-Core
                    (
                        BuildType: Release
                    );
                }

                # Publish
                {
                    call dfhack-raft::Publish-DFHack-Release();
                }

                with lock = !DFHackVariable
                {
                    Set-BuildVariable DFHackReleaseDeployed
                    (
                        Value: true
                    );
                }
            }
        }

        Set-Execution-Priority 5;

        GitHub-Set-Status
        (
            Credentials: GitHub-DFHack,
            Organization: DFHack,
            Repository: $GitHubBuildRepository,
            AdditionalContext: $GitHubBuildContext,
            CommitHash: $GitHubBuildCommit,
            Description: "#$ExecutionId building in debug mode...",
            Status: pending
        );

        call dfhack-raft::DFHack-Build-Core
        (
            BuildType: RelWithDebInfo,
            ArtifactSuffix: -dbg
        );
    }
    else
    {
        GitHub-Set-Status
        (
            Credentials: GitHub-DFHack,
            Organization: DFHack,
            Repository: $GitHubBuildRepository,
            AdditionalContext: $GitHubBuildContext,
            CommitHash: $GitHubBuildCommit,
            Description: "#$ExecutionId building...",
            Status: pending
        );

        call dfhack-raft::DFHack-Build-Core
        (
            BuildType: RelWithDebInfo
        );
    }
}
catch
{
    error;
}

GitHub-Set-Status
(
    Credentials: GitHub-DFHack,
    Organization: DFHack,
    Repository: $GitHubBuildRepository,
    AdditionalContext: $GitHubBuildContext,
    CommitHash: $GitHubBuildCommit,
    Status: auto
);
